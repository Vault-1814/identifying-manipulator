#!/usr/bin/env python
import rospy, threading
import tf
from math import pi, sin, cos

from youbot_arm_kinematics.srv import IK
from std_srvs.srv import Empty

from sensor_msgs.msg import JointState

from youbot_arm_kinematics.kinematics import Kinematics
from youbot_arm_kinematics.dh_parameters import YouBotDHParameters

from brics_actuator.msg import JointPositions, JointValue, JointVelocities

N = 5   # qty joints

class ControllingYoubotNode:

    def __init__(self):
        self.lock = threading.Lock()
        self.home_srv = rospy.Service('gohome', Empty, self.goHome)
        self.candle_srv = rospy.Service('gocandle', Empty, self.goCandle)
        self.ds_srv = rospy.Service('switchDeal', Empty, self.switchDeal)

        self.jp_pub = rospy.Publisher("arm_1/arm_controller/position_command", JointPositions, queue_size=10, latch=True)
        self.js_sub = rospy.Subscriber("joint_states", JointState, self.callbackJointState)

        self.ks = Kinematics(YouBotDHParameters.DH_A, YouBotDHParameters.DH_ALPHA, YouBotDHParameters.DH_D, YouBotDHParameters.DH_THETA)
        
        self.flag = False
        self.log_file = open('youbot_furier_goal.txt', 'w')
        self.log_file_mes = open('youbot_furier_mes.txt', 'w')
        self.start_time = 0
        
        ## SOME STUFF
        position = [3.04, 1.18, -2.63, 1.75, 2.89]
        self.pos_template = JointPositions()
        for i in range(N):
            self.pos_template.positions.append(JointValue())
            self.pos_template.positions[i].joint_uri = 'arm_joint_' + str(i+1)
            self.pos_template.positions[i].unit = 'rad'
            self.pos_template.positions[i].value = position[i]

    def __del__(self):
        self.log_file_goal.close()
        self.log_file_mes.close()

    def goCandle(self, req):
        position = [3.04, 1.18, -2.63, 1.75, 2.89]
        jp_msg = JointPositions()
        for i in range(N):
            jp_msg.positions.append(JointValue())
            jp_msg.positions[i].joint_uri = 'arm_joint_' + str(i+1)
            jp_msg.positions[i].unit = 'rad'
            jp_msg.positions[i].value = position[i]
        self.jp_pub.publish(jp_msg)

    def goHome(self, req):
        """
        [0, 0, 0, 0, 0.004]
        """
        jp_msg = JointPositions()
        for i in range(N):
            jp_msg.positions.append(JointValue())
            jp_msg.positions[i].joint_uri = 'arm_joint_' + str(i+1)
            jp_msg.positions[i].unit = 'rad'
            jp_msg.positions[i].value = 0.025
        jp_msg.positions[2].value = -0.016
        jp_msg.positions[4].value = 0.12
        self.jp_pub.publish(jp_msg)

    def switchDeal(self, req):
        self.flag = not self.flag
        print("Switch deal is {}!".format(self.flag))
        
    def callbackJointState(self, js_msg):
		time = js_msg.header.stamp.to_sec() - self.start_time

		self.lock.acquire()
		ca = js_msg.position
		cv = js_msg.velocity
		ct = js_msg.effort
		if len(ct) == 0:
			ct = [0]
		
		if time < 10000:
			self.log_file_mes.write(str(ca[0]) + ' ' + str(cv[0]) + ' ' + str(ct[0]) + ' ' + str(time) + '\n')
	
		self.lock.release()
		
    def doTrajectory(self, t):
        nf = 5
        T = 8.

        w0 = 2. * pi / T
        q0 = 5.7 / 2.
        a = [5.5, 2., 3., 3., 2.];
        b = [0., 5., 0., 1., 4.]

        q = 0.
        for k in range(nf):
            q = q + q0 + a[k] * sin(k * w0 * t) + b[k] * cos(k * w0 * t)
        q = 2.5 + 2* sin(w0 * t) + 0.5 * cos(2 * w0 * t) + 0.3 * sin(4 * w0 * t) + 0.1 * cos(6 * w0 * t)
        #q = 0.19 * q
        
        if 0.1 < q < 5.8:
            self.log_file.write("{} {}\n".format(t, q))
            self.pos_template.positions[0].value = q
             self.jp_pub.publish(self.pos_template)

    def loop(self):
        rospy.init_node("controlling_youbot_node")

        rate = rospy.Rate(30)

        self.start_time = rospy.Time.now().to_sec()
        start_time = rospy.Time.now().to_sec()
        while not rospy.is_shutdown():

            if self.flag:
                t = rospy.Time.now().to_sec() - start_time
                self.doTrajectory(t)
            else:
                start_time = rospy.Time.now().to_sec()


            rate.sleep()		
    

if __name__ == '__main__':
    cyn = ControllingYoubotNode()
    cyn.loop()
    
    
    
    
    
    
    
    
    
    
    
    

